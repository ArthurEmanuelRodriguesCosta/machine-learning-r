library(dplyr)
data <- read.csv("treino.csv")
getwd()
setwd("/home/arthurerc/Documentos/ad2")
data <- na.omit(data)
data <- read.csv("treino.csv")
library(dplyr)
data <- read.csv("treino.csv")
getwd(0)
getwd()
setwd("/home/arthurerc/Documentos/ad2/lab3")
data <- read.csv("treino.csv")
data <- data %>% filter(MAT_TUR_ANO > 2005)
data <- data %>% group_by(MAT_ALU_MATRICULA) %>% summarise(media = mean(MAT_MEDIA_FINAL))
data <- na.omit(data)
View(data)
data1 <- read.csv("treino.csv")
data <- data1 %>% filter(MAT_TUR_ANO > 2005)
data <- data1 %>% group_by(MAT_ALU_MATRICULA) %>% summarise(media = mean(MAT_MEDIA_FINAL), )
data <- na.omit(data)
data <- data1 %>% group_by(MAT_ALU_MATRICULA) %>% summarise(media = mean(MAT_MEDIA_FINAL))
data <- na.omit(data)
View(data)
data <- data1 %>% group_by(MAT_ALU_MATRICULA) %>% summarise(media = mean(MAT_MEDIA_FINAL), evadiu = EVADIU)
data <- data1 %>% group_by(MAT_ALU_MATRICULA) %>% summarise(media = mean(MAT_MEDIA_FINAL), EVADIU)
data <- data1 %>% group_by(MAT_ALU_MATRICULA) %>% summarise(media = mean(MAT_MEDIA_FINAL), evadiu = names(table(EVADIU)))
View(data)
View(data1)
data <- data1 %>% group_by(MAT_ALU_MATRICULA) %>% summarise(media = mean(MAT_MEDIA_FINAL, na.rm = T), evadiu = names(table(EVADIU)))
View(data)
data <- data1 %>% group_by(MAT_ALU_MATRICULA) %>% summarise(media = mean(MAT_MEDIA_FINAL), evadiu = names(table(EVADIU)))
data <- data1 %>% group_by(MAT_ALU_MATRICULA) %>% summarise(media = mean(MAT_MEDIA_FINAL, na.rm = T), evadiu = names(table(EVADIU)))
data <- data %>% mutate(media = ifelse(is.na(media), 10, media))
View(data)
data1 <- read.csv("treino.csv")
View(data1)
data <- data1 %>% filter(MAT_TUR_ANO > 2010)
data <- data1 %>% group_by(MAT_ALU_MATRICULA) %>% summarise(media = mean(MAT_MEDIA_FINAL, na.rm = T), evadiu = names(table(EVADIU)))
data <- data %>% mutate(media = ifelse(is.na(media), 10, media))
training <- data[Train,]
Train <- createDataPartition(data, p=0.6, list=FALSE)
library(caret)
Train <- createDataPartition(data, p=0.6, list=FALSE)
training <- data[Train,]
testing <- data[-Train,]
fit <- caret_model <- train(EVADIU ~ media,  data=training, method="glm", family="binomial")
View(training)
fit <- caret_model <- train(evadiu ~ media,  data=training, method="glm", family="binomial")
fit <- train(evadiu ~ media,  data=training, method="glm", family="binomial")
install.packages('e1071', dependencies=TRUE)
fit <- train(evadiu ~ media,  data=training, method="glm", family="binomial")
caret_model <- train(evadiu ~ media,  data=training, method="glm", family="binomial")
caret.probs <- predict(caret_model, newdata=testing, type="prob")
View(training)
View(testing)
Train <- createDataPartition(data, p=0.6, list=FALSE)
training <- data[Train,]
testing <- data[-Train,]
Train <- createDataPartition(data,list=FALSE)
training <- data[Train,]
testing <- data[-Train,]
caret_model <- train(evadiu ~ media,  data=training, method="glm", family="binomial")
caret.probs <- predict(caret_model, newdata=testing, type="prob")
library(caret)
data(GermanCredit)
str(GermanCredit)
Train <- createDataPartition(GermanCredit$Class, p=0.6, list=FALSE)
training <- GermanCredit[ Train, ]
testing <- GermanCredit[ -Train, ]
caret_model <- train(Class ~ Age + ForeignWorker + Property.RealEstate + Housing.Own +
CreditHistory.Critical,  data=training, method="glm", family="binomial")
caret.probs <- predict(caret_model, newdata=testing, type="prob")
library(dplyr)
library(caret)
data1 <- read.csv("treino.csv")
# so media final tem NAs
sapply(data, function(x) sum(is.na(x)))
data <- data1 %>% filter(MAT_TUR_ANO > 2010)
data <- data1 %>% group_by(MAT_ALU_MATRICULA) %>% summarise(media = mean(MAT_MEDIA_FINAL, na.rm = T), evadiu = names(table(EVADIU)))
data <- data %>% mutate(media = ifelse(is.na(media), 10, media))
Train <- createDataPartition(data,list=FALSE)
training <- data[Train,]
testing <- data[-Train,]
caret_model <- train(evadiu ~ media,  data=training, method="glm", family="binomial")
caret.probs <- predict(caret_model, newdata=testing, type="prob")
caret_model
View(training)
Train <- createDataPartition(data, p = "0.6", list=FALSE)
training <- data[Train,]
View(data)
?createDataPartition
Train <- createDataPartition(data, p = 0.6, list=FALSE)
training <- data[Train,]
library(dplyr)
library(caret)
data1 <- read.csv("treino.csv")
# so media final tem NAs
sapply(data, function(x) sum(is.na(x)))
data <- data1 %>% filter(MAT_TUR_ANO > 2010)
data <- data1 %>% group_by(MAT_ALU_MATRICULA) %>% summarise(media = mean(MAT_MEDIA_FINAL, na.rm = T), evadiu = names(table(EVADIU)))
data <- data %>% mutate(media = ifelse(is.na(media), 10, media))
library(dplyr)
library(caret)
data1 <- read.csv("treino.csv")
data <- data1 %>% filter(MAT_TUR_ANO > 2010)
data <- data1 %>% group_by(MAT_ALU_MATRICULA) %>% summarise(media = mean(MAT_MEDIA_FINAL, na.rm = T), evadiu = names(table(EVADIU)))
data <- data %>% mutate(media = ifelse(is.na(media), 10, media))
Train <- createDataPartition(data, p = 0.6, list=FALSE)
training <- data[Train,]
View(training)
Train <- createDataPartition(data, p = 0.6)
training <- data[Train,]
data <- data1 %>% group_by(MAT_ALU_MATRICULA, MAT_TUR_ANO) %>% summarise(media = mean(MAT_MEDIA_FINAL, na.rm = T), evadiu = names(table(EVADIU)))
data <- data %>% mutate(media = ifelse(is.na(media), 10, media))
View(data1)
data <- data1 %>% group_by(MAT_ALU_MATRICULA, MAT_TUR_ANO, MAT_TUR_PERIODO) %>% summarise(media = mean(MAT_MEDIA_FINAL, na.rm = T), evadiu = names(table(EVADIU)))
data <- data %>% mutate(media = ifelse(is.na(media), 10, media))
training <- data %>% filter(MAT_TUR_ANO <= 2014 | MAT_TUR_ANO == 2015 & MAT_TUR_PERIODO == 1 )
testing <- data[-training]
testing <- data[-training,]
testing <- data %>% filter(MAT_TUR_ANO == 2015 & MAT_TUR_PERIODO == 2)
View(testing)
caret_model <- train(evadiu ~ media,  data=training, method="glm", family="binomial")
caret.probs <- predict(caret_model, newdata=testing, type="prob")
caret_model
caret.results <- predict(caret_model,newdata=testing)
confusionMatrix(data=caret.results, reference=testing$Class)
caret.results <- predict(caret_model,newdata=testing)
confusionMatrix(data=caret.results, reference=testing$evadiu)
caret_model
summary(caret_model)
confusionMatrix(data=caret.results, reference=testing$evadiu)
